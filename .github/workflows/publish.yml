name: Publish

on:
  workflow_dispatch:
    inputs:
      feed:
        description: NuGet feed
        required: true
        default: Staging
        type: choice
        options:
          - Production
          - Staging
      version:
        description: Library version
        required: true
        default: 1.0.0-preview.30
        type: string

jobs:
  publish:
    name: Test and publish
    runs-on: ubuntu-latest
    env:
      BUILD_CONFIG: Release
      WORKING_DIR: src/libp2p
    steps:

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up .NET
        uses: actions/setup-dotnet@v4

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: dotnet restore

      - name: Build
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          dotnet build -c ${{ env.BUILD_CONFIG }} --no-restore \
            -p:Commit=${{ github.sha }} \
            -p:Version=${{ github.event.inputs.version }}

      - name: Test
        working-directory: ${{ env.WORKING_DIR }}
        env:
          TEST_OPTS: -c ${{ env.BUILD_CONFIG }} --no-build
        run: |
          dotnet test Libp2p.Core.Tests ${{ env.PACK_OPTS }}
          #dotnet test Libp2p.Protocols.Multistream.Tests ${{ env.PACK_OPTS }}
          dotnet test Libp2p.Protocols.Noise.Tests ${{ env.PACK_OPTS }}
          dotnet test Libp2p.Protocols.Pubsub.Tests ${{ env.PACK_OPTS }}
          dotnet test Libp2p.Protocols.Quic.Tests ${{ env.PACK_OPTS }}

      - name: Publish
        working-directory: ${{ env.WORKING_DIR }}
        env:
          PACK_OPTS: -c ${{ env.BUILD_CONFIG }} --no-build -p:Version=${{ github.event.inputs.version }}
          NO_VERSION_PACK_OPTS: -c ${{ env.BUILD_CONFIG }} --no-build
        run: |
          dotnet pack Libp2p ${{ env.PACK_OPTS }}
          dotnet pack Libp2p.Core ${{ env.PACK_OPTS }}
          dotnet pack Libp2p.Generators.Protobuf ${{ env.NO_VERSION_PACK_OPTS }}
          dotnet pack Libp2p.Protocols.Identify ${{ env.PACK_OPTS }}
          dotnet pack Libp2p.Protocols.IpTcp ${{ env.PACK_OPTS }}
          dotnet pack Libp2p.Protocols.MDns ${{ env.PACK_OPTS }}
          dotnet pack Libp2p.Protocols.Multistream ${{ env.PACK_OPTS }}
          dotnet pack Libp2p.Protocols.Noise ${{ env.PACK_OPTS }}
          dotnet pack Libp2p.Protocols.Ping ${{ env.PACK_OPTS }}
          dotnet pack Libp2p.Protocols.Plaintext ${{ env.PACK_OPTS }}
          dotnet pack Libp2p.Protocols.Pubsub ${{ env.PACK_OPTS }}
          dotnet pack Libp2p.Protocols.Quic ${{ env.PACK_OPTS }}
          dotnet pack Libp2p.Protocols.Yamux ${{ env.PACK_OPTS }}
          
          dotnet nuget push **/*.nupkg \
            -k ${{ github.event.inputs.feed == 'Production' && secrets.NUGET_API_KEY || secrets.NUGETTEST_API_KEY }} \
            -s ${{ github.event.inputs.feed == 'Production' && 'https://api.nuget.org/v3/index.json' || 'https://apiint.nugettest.org/v3/index.json' }} \
            --skip-duplicate
